cutoff <- data.frame(x = c(-Inf, Inf), y = c(PI_1,PI_1))
Ident <- which(rownames(U0tab_1) == codedHub.Name)
P <- ggplot(U0tab, aes(U0_rank, PIj)) + geom_point(size=3, shape=18) +
scale_x_continuous(breaks=Ident, labels=Hub.Name) +
geom_segment(aes(x=U0tab$U0_rank, y=Trans(beta, U0tab$U0-1.96*U0tab$U0se), xend=U0tab$U0_rank, yend=Trans(beta, U0tab$U0+1.96*U0tab$U0se)),
size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches"))) +
geom_line(aes(x,y), cutoff, size=0.5, linetype="dashed") + scale_y_continuous(limits = c(0, 1)) + labs(x = "Centre", y = "Proportion")
P <- P + theme(axis.text=element_text(size=14, face="bold"),
axis.text.x=element_text(angle=20, vjust=0.5, hjust = 0.5),
axis.text.y=element_text(vjust=0.5, hjust = 0.5),
plot.margin = unit(c(0.3,0.9,0.3,0.3), "cm"),
axis.title=element_text(size = rel(1.8)),
axis.title.x=element_text(vjust=-0.5),
axis.title.y=element_text(vjust=1.5),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = 'grey89'), panel.grid.minor = element_line(colour = 'grey89'))
return(list(Stat = list(VPC=VPC, Pvalue=Pvalue, beta=beta, U0tab=U0tab_1, PI_1=PI_1, CI.lower_1=CI.lower_1, CI.upper_1=CI.upper_1), Plot=P))
} else {
return(list(VPC=VPC, Pvalue=Pvalue, beta=beta, U0tab=U0tab_1, PI_1=PI_1, CI.lower_1=CI.lower_1, CI.upper_1=CI.upper_1))
}
}
#' Table's caption for latex format
#' @description return a latex format to include table caption
#' @param caption string of your caption
tabCap <- function(caption){
paste0("\\textit{", caption, "}")
}
#' deterministic decimal places
#' @description specify how many decimal numbers do you want to return
#' @param x the given numer (or a vector of given numbers)
#' @param k number of decimal places required
Specify.dec <- function(x, k = 2){
format(round(x, k), nsmall=k)
}
#' Show plus sign for positive numbers
#' @description return a text showing the plus '+' sign in front of positive numbers.
Sign.dif <- function(Number){
if(as.numeric(Number) > 0){
paste0("+",Number)
} else
Number
}
#' Pre-processing data imported by the 'haven' package
#' @description This function is used to present factors by labels, replace NaN by NA (in order to have all missing values coded in the same way)
#' @param df data frame imported from Stata data file by the rio package
#' @export
Post.Haven <- function(df){
DF = as.data.frame(df)
DF[is.na(DF)] <- NA
f = function(x){
if(haven::is.labelled(x)){Out = haven::as_factor(x)} else {Out = x}
}
for(i in 1:dim(DF)[2]){
DF[,i] <- f(DF[,i])
}
return(DF)
}
#' Categorize SDQ measures
#' @param x variable (an SDQ measure) to be categorize
#' @param cut.breaks The cut points for splitting categories
#' @param levels labels of the generated levels
Categ <- function(x, cut.breaks, levels = c("Avg.", "S.raised", "high", "V.high")){
factor(cut(x, breaks=cut.breaks), labels = levels)
}
#' Extract DIC info from MLwiN Outout
#' @description return a data frame containing information of the DIC of the model fitted using R2MLwiN package
#' @param MLwiN.model The model outcome obtained by the 'R2MLwiN' package (e.g. using \code{sink})
get.DIC <- function(MLwiN.model){
sink("MLwiN_Out.txt")
print(summary(MLwiN.model))
sink()
MLwiN.Outputs <- readLines("MLwiN_Out.txt")
unlink("MLwiN_Out.txt")
LnId <- which(!is.na(stringr::str_match(MLwiN.Outputs, "Bayesian Deviance Information Criterion \\(DIC\\)")))
List <- strsplit(MLwiN.Outputs[c(LnId+1, LnId+2)], "\\s+")
Re <- as.numeric(List[[2]]); names(Re) <- List[[1]]
Re
}
#' Extract fixed effect estimates from MLwiN Outout
#' @description return a data frame containing fixed effect estimates of the model fitted using R2MLwiN package - MIGHT NEED REVISE AS IT MIGHT GET WARNING MESSAGE IF THE CELL (***) IS EMPTY!!!
#' @param MLwiN.model The model outcome obtained by the 'R2MLwiN' package
Get.Fixed.est <- function(MLwiN.model){
sink("MLwiN_Out.txt")
print(summary(MLwiN.model))
sink()
MLwiN.Outputs <- readLines("MLwiN_Out.txt")
unlink("MLwiN_Out.txt")
LnId.start <- which(!is.na(stringr::str_match(MLwiN.Outputs, "The fixed part estimates:")))
LnId.end <- which(!is.na(stringr::str_match(MLwiN.Outputs, "Signif. codes:\\s*\\.*")))
# split items by spaces
List <- strsplit(MLwiN.Outputs[(LnId.start+2):(LnId.end-1)], "\\s+")
Raw.Re <- data.frame(do.call("rbind", List))
names(Raw.Re) <- c("", "Coef.", "Std. Err.", "z", "Pr(>|z|)", "", "95% CI.lower", "95% CI.upper", "ESS")
Raw.Re[,-c(1,6)] <- apply(Raw.Re[,-c(1,6)], 2, function(x){as.numeric(as.character(x))})
Re <- Raw.Re
return(Re)
}
#' Extract random part estimates from MLwiN Outout
#' @description return a vector containing random effect estimates of the model fitted using R2MLwiN package
#' @param MLwiN.model The model outcome obtained by the 'R2MLwiN' package
Get.Random.est <- function(MLwiN.model){
sink("MLwiN_Out.txt")
print(summary(MLwiN.model))
sink()
MLwiN.Outputs <- readLines("MLwiN_Out.txt")
unlink("MLwiN_Out.txt")
LnId <- which(!is.na(stringr::str_match(MLwiN.Outputs, "^var_\\w+")))
List <- strsplit(MLwiN.Outputs[LnId], "\\s+")
Raw.Re <- data.frame(do.call("rbind", List))
names(Raw.Re) <- c("", " Coef.", "Std. Err.", "95% CI.lower", "95% CI.upper", "ESS")
Raw.Re[,-1] <- apply(Raw.Re[,-1], 2, function(x){as.numeric(as.character(x))})
Re <- Raw.Re
return(Re)
}
#' Collect statistics for summary table
#' @description Organise all required information for summary table and return them all in a list
#'
Set.Sumary = function(Model, P, CI.l, CI.u, VPC, Pval, tab.ind){
n = summary(Model)$devcomp$dims["n"]
return(list(n=n, P=P, CI.l=CI.l, CI.u=CI.u, VPC=VPC, Pval=Pval, tab=tab.ind))
}
SDQ.Sumary = function(N, P, CI, VPC, Pval, Size, tab.ind, Cat = "Avg.", codedHub.Name){
n = sum(N)
P = P[Cat]
CI.l = CI[Cat, "lower"]
CI.u = CI[Cat, "upper"]
Size = Size[codedHub.Name]
P.ind = tab.ind[Cat,1,codedHub.Name] - P
l.ind = tab.ind[Cat,2,codedHub.Name] - P
u.ind = tab.ind[Cat,3,codedHub.Name] - P
return(list(n=n, P=P, CI.l=CI.l, CI.u=CI.u, VPC=VPC, Pval=Pval, Size=Size, P.ind=P.ind, l.ind=l.ind, u.ind=u.ind))
}
ggplot(data.frame(U0tab_1), aes(1:13, PIj)) + geom_point(size=3, shape=18, colour="black")
2+5
data.frame(U0tab_1)
N
U0tab_1
as.data.frame(U0tab_1)
ggplot(data.frame(U0tab_1), aes(1:13, PIj)) + geom_point(size=3, shape=18, colour="black")
View(U0tab_1)
P <- ggplot(data.frame(U0tab_1), aes(1:13, PIj)) +
geom_point(size=3, shape=18, colour="black") +
geom_segment(aes(x=1:13, y=lower, xend=1:13, yend=upper),
size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches")), colour = "black")
P
PI_1
P <- ggplot(data.frame(U0tab_1), aes(1:13, PIj + PI_1)) +
geom_point(size=3, shape=18, colour="black") +
geom_segment(aes(x=1:13, y=lower + PI_1, xend=1:13, yend=upper + PI_1),
size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches")), colour = "black")
P
cutoff
Ident
Ident <- which(rownames(U0tab_1) == codedHub.Name)
codedHub.Name = "CAM"
Ident <- which(rownames(U0tab_1) == codedHub.Name)
Hub.Name
Hub.Name = "CAMAMA"
P <- ggplot(data.frame(U0tab_1), aes(1:13, PIj + PI_1)) +
geom_point(size=3, shape=18, colour="black") +
geom_segment(aes(x=1:13, y=lower + PI_1, xend=1:13, yend=upper + PI_1),
size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches")), colour = "black") +
scale_x_continuous(breaks=Ident, labels=Hub.Name) +
geom_line(aes(x,y, colour="black"), cutoff, size=0.5, linetype="dashed") +
scale_y_continuous(limits = c(0, 1)) + labs(x = "Centre", y = "Proportion")
P
poor_U0tab <- data.frame(poor_U0tab[match(rownames(U0tab_1), rownames(poor_U0tab)),])
Stat2 = P.dento$Stat
beta_2 = Stat2$beta
PI_2 = Stat2$PI_1
H.sigma_2 = Stat2$H.sigma
CI.lower_2 = Stat2$CI.lower_1
CI.upper_2 = Stat2$CI.upper_1
VPC_2 = Stat2$VPC$VPC
Pvalue_2 = Stat2$Pvalue
#### Use This to report individual differences from mean
poor_U0tab_1 <- P.dento$U0tab_1
Dent.poor = list(n=N, P=PI_2, CI.l_1=CI.lower_2, CI.u=CI.upper_2, VPC=VPC_2, Pval=Pvalue_2, tab=poor_U0tab_1)
poor_U0tab
poor_U0tab_1 <- data.frame(poor_U0tab_1[match(rownames(U0tab_1), rownames(poor_U0tab_1)),])
Cutoff_PoorOverall <- data.frame(x = c(-Inf, Inf), y = c(PI_2, PI_2))
poor_U0tab_1
U0tab_1
poor_U0tab_1$lower + PI_2
cutoff <- data.frame(x = c(-Inf, Inf), y = c(PI_1,PI_1))
Ident <- which(rownames(U0tab_1) == codedHub.Name)
P <- ggplot(data.frame(U0tab_1), aes(1:13, PIj + PI_1)) +
geom_point(size=3, shape=18, colour="black") +
geom_segment(aes(x=1:13, y=lower + PI_1, xend=1:13, yend=upper + PI_1),
size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches")), colour = "black") +
scale_x_continuous(breaks=Ident, labels=Hub.Name) +
geom_line(aes(x,y, colour="black"), cutoff, size=0.5, linetype="dashed") +
scale_y_continuous(limits = c(0, 1)) + labs(x = "Centre", y = "Proportion")
## adding dent-poor to the graph
poor_U0tab_1 <- data.frame(poor_U0tab_1[match(rownames(U0tab_1), rownames(poor_U0tab_1)),])
Cutoff_PoorOverall <- data.frame(x = c(-Inf, Inf), y = c(PI_2, PI_2))
P <- P + geom_point(aes(1:13, poor_U0tab_1$PIj, colour="cornsilk4"), size=3, shape=18) +
geom_line(aes(x,y, colour="cornsilk4"), Cutoff_PoorOverall, size=0.5, linetype="dashed") +
geom_segment(aes(x=1:13, y=poor_U0tab_1$lower + PI_2, xend=1:13, yend=poor_U0tab_1$upper + PI_2, colour="cornsilk4"), size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches")))
P + THEME +
scale_colour_manual(values = c("black", "cornsilk4"), labels = c("Good", "Poor"), name='')
THEME = theme(axis.text=element_text(size=12, face="bold"),
axis.text.x=element_text(angle=20, vjust=0.5, hjust = 0.5),
axis.text.y=element_text(vjust=0.5, hjust = 0.5),
plot.margin = unit(c(0.3,0.9,0.3,0.3), "cm"),
axis.title=element_text(size = rel(1.4)),
axis.title.x=element_text(vjust=-0.5),
axis.title.y=element_text(vjust=1.5),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = 'grey89'), panel.grid.minor = element_line(colour = 'grey89'))
cutoff <- data.frame(x = c(-Inf, Inf), y = c(PI_1,PI_1))
Ident <- which(rownames(U0tab_1) == codedHub.Name)
P <- ggplot(data.frame(U0tab_1), aes(1:13, PIj + PI_1)) +
geom_point(size=3, shape=18, colour="black") +
geom_segment(aes(x=1:13, y=lower + PI_1, xend=1:13, yend=upper + PI_1),
size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches")), colour = "black") +
scale_x_continuous(breaks=Ident, labels=Hub.Name) +
geom_line(aes(x,y, colour="black"), cutoff, size=0.5, linetype="dashed") +
scale_y_continuous(limits = c(0, 1)) + labs(x = "Centre", y = "Proportion")
## adding dent-poor to the graph
poor_U0tab_1 <- data.frame(poor_U0tab_1[match(rownames(U0tab_1), rownames(poor_U0tab_1)),])
Cutoff_PoorOverall <- data.frame(x = c(-Inf, Inf), y = c(PI_2, PI_2))
P <- P + geom_point(aes(1:13, poor_U0tab_1$PIj, colour="cornsilk4"), size=3, shape=18) +
geom_line(aes(x,y, colour="cornsilk4"), Cutoff_PoorOverall, size=0.5, linetype="dashed") +
geom_segment(aes(x=1:13, y=poor_U0tab_1$lower + PI_2, xend=1:13, yend=poor_U0tab_1$upper + PI_2, colour="cornsilk4"), size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches")))
P + THEME +
scale_colour_manual(values = c("black", "cornsilk4"), labels = c("Good", "Poor"), name='')
P <- ggplot(data.frame(U0tab_1), aes(1:13, PIj + PI_1)) +
geom_point(size=3, shape=18, colour="black") +
geom_segment(aes(x=1:13, y=lower + PI_1, xend=1:13, yend=upper + PI_1),
size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches")), colour = "black") +
scale_x_continuous(breaks=Ident, labels=Hub.Name) +
geom_line(aes(x,y, colour="black"), cutoff, size=0.5, linetype="dashed") +
scale_y_continuous(limits = c(0, 1)) + labs(x = "Centre", y = "Proportion")
## adding dent-poor to the graph
poor_U0tab_1 <- data.frame(poor_U0tab_1[match(rownames(U0tab_1), rownames(poor_U0tab_1)),])
Cutoff_PoorOverall <- data.frame(x = c(-Inf, Inf), y = c(PI_2, PI_2))
P <- P + geom_point(aes(1:13, poor_U0tab_1$PIj + PI_2, colour="cornsilk4"), size=3, shape=18) +
geom_line(aes(x,y, colour="cornsilk4"), Cutoff_PoorOverall, size=0.5, linetype="dashed") +
geom_segment(aes(x=1:13, y=poor_U0tab_1$lower + PI_2, xend=1:13, yend=poor_U0tab_1$upper + PI_2, colour="cornsilk4"), size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches")))
P + THEME +
scale_colour_manual(values = c("black", "cornsilk4"), labels = c("Good", "Poor"), name='')
VPC_2
N
round(PI_2, digits = 2)
round(CI.lower_2, digits = 2)
round(CI.upper_2, digits=2)
round(VPC_2, digits=2)
Pvalue_2
round(Pvalue_2, digits=2)
Pvalue_2 = 0.90
round(Pvalue_2, digits=2)
source("R/Rfuns.R")
options(MLwiN_path="C:/Program Files/MLwiN v3.01/")
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
load("../data/SuppObj.RData")
P.photo$U0tab_1
source("R/Rfuns.R")
options(MLwiN_path="C:/Program Files/MLwiN v3.01/")
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
Stat = G.photo$Stat
N = 252
beta_11 = Stat$beta
PI_11   = Stat$PI_1
CI.lower_11 = Stat$CI.lower_1
CI.upper_11 = Stat$CI.upper_1
VPC_11  = Stat$VPC$VPC
Pvalue_11 = 0.90
U0tab_11_ind <- G.photo$U0tab_1
Fac.good = list(n=N, P=PI_11, CI.l_1=CI.lower_11, CI.u=CI.upper_11, VPC=VPC_11, Pval=Pvalue_11, tab=U0tab_11_ind)
Stat22 = P.photo$Stat
beta22 = Stat22$beta
PI_22  = Stat22$PI_1
CI.lower_22 = Stat22$CI.lower_1
CI.upper_22 = Stat22$CI.upper_1
VPC_22  = Stat22$VPC$VPC
Pvalue_22 = 0.9
U0tab_11_poor_ind <- P.photo$U0tab_1
Fac.poor = list(n=N, P=PI_22, CI.l_1=CI.lower_22, CI.u=CI.upper_22, VPC=VPC_22, Pval=Pvalue_22, tab=U0tab_11_poor_ind)
cutoff <- data.frame(x = c(-Inf, Inf), y = c(PI_11,PI_11))
Ident <- which(rownames(U0tab_11_ind) == codedHub.Name)
P <- ggplot(data.frame(U0tab_11_ind), aes(1:13, PIj + PI_11)) +
geom_point(size=3, shape=18, colour="black") +
geom_segment(aes(x=1:13, y=U0tab_11_ind$lower + PI_11,
xend=1:13, yend=U0tab_11_ind$upper + PI_11),
size=0.6, arrow=arrow(angle=90, ends="both", length = unit(0.08, "inches"))) +
scale_x_continuous(breaks=Ident, labels=Hub.Name) +
geom_line(aes(x,y, colour="black"), cutoff, size=0.5, linetype="dashed") +
scale_y_continuous(limits = c(0, 0.6)) + labs(x = "Centre", y = "Proportion")
U0tab_11_poor <- data.frame(U0tab_11_poor_ind[match(rownames(U0tab_11_ind), rownames(U0tab_11_poor_ind)),])
cutoff_photoPoor <- data.frame(x = c(-Inf, Inf), y = c(PI_22,PI_22))
U0tab_11_poor$PIj
PI_22
U0tab_11_poor$lower
U0tab_11_poor$upper
source("R/Rfuns.R")
options(MLwiN_path="C:/Program Files/MLwiN v3.01/")
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
U0tab_11_ind
data.frame(U0tab_11_ind)
PI_11
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
fit <- DMFT$Model
fit.No <- DMFT$M_no
Flu.tab
Social$N
Social$Ind
Social$Plot.Mat
Stat = None.caries$Stat
PI_22   = Stat$Stat$PI_1
PI_22
Stat = None.caries$Stat
None.caries$Stat
PI_22   = Stat$Stat$PI_1
PI_22
Stat$Stat$PI_1
Stat$PI_1
FileList = list.files("data/SuppObjects/")
FileList
getwd()
for(i in 1:length(FileList)){
load(file = paste0("./data/SuppObjects/", FileList[i]))
}
rm(i, FileList)
FileList = list.files("data/SuppObjects/")
for(i in 1:length(FileList)){
load(file = paste0("./data/SuppObjects/", FileList[i]))
}
rm(i, FileList)
save.image("O:/Github/CCUK-GenRep/data/SuppObj.RData")
load("O:/Github/CCUK-GenRep/data/SuppObj.RData")
source("R/Rfuns.R")
options(MLwiN_path="C:/Program Files/MLwiN v3.01/")
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
source("R/Rfuns.R")
options(MLwiN_path="C:/Program Files/MLwiN v3.01/")
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
source("R/Rfuns.R")
options(MLwiN_path="C:/Program Files/MLwiN v3.01/")
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
Social
Out.Sizes <- Social$N
Out.Sizes
source("R/Rfuns.R")
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
source("R/Rfuns.R")
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
Hubs = c("Cambridge" = "CAM")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
source("R/Rfuns.R")
Hubs = c("Cambridge" = "CAM", "Leeds" = "LEEDS", "Liverpool" = "LIV", "Manchester" = "MAN", "Midlands" = "MIDS",
"Northern Ireland" = "N.IRE", "North Thames" = "N.THAMES", "Newcastle" = "NEWC", "South Thames" = "S.THAMES",
"Scotland" = "SCOT",  "Spires" = "SPIRES", "South West" = "SWSW", "Trent" = "TRENT")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
Hubs = c("Liverpool" = "LIV")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
load("../data/SuppObj.RData")
Stat = G.dento$Stat
N = 197
PI_1 = Stat$PI_1
H.sigma = Stat$H.sigma
CI.lower_1 = Stat$CI.lower_1
CI.upper_1 = Stat$CI.upper_1
Pvalue_1 = Stat$Pvalue
U0tab_1 <- G.dento$U0tab_1
U0tab_1
fit <- DMFT$Model
fit.No <- DMFT$M_no
Stat = Uni.Stat(fit, fit.No, DF = OH, Response = "c_nocaries", Plot = TRUE, codedHub.Name, Hub.Name)
load("../data/CCUK.RData")
Stat = Uni.Stat(fit, fit.No, DF = OH, Response = "c_nocaries", Plot = TRUE, codedHub.Name, Hub.Name)
codedHub.Name = "CAM"
Hub.Name = "CAAAA"
Stat = Uni.Stat(fit, fit.No, DF = OH, Response = "c_nocaries", Plot = TRUE, codedHub.Name, Hub.Name)
beta_2 = Stat$Stat$beta
CI.lower_2 = Stat$Stat$CI.lower_1
CI.upper_2 = Stat$Stat$CI.upper_1
Pvalue_2 = Stat$Stat$Pvalue
U0tab_2_ind = Stat$Stat$U0tab
U0tab_2_ind
row.names(U0tab_1)
Ind <- Social$Ind
Ind
Out.Sizes <- Social$N
Out.Sizes
row.names(U0tab_1)[row.names(U0tab_1) == "LIVERPOOL"] = "LIV"
row.names(U0tab_1)
row.names(U0tab_1)[row.names(U0tab_1) == "LIVERPOOL"] = "LIV"
row.names(U0tab_1)[row.names(U0tab_1) == "MANCHESTER"] = "MAN"
row.names(U0tab_1)[row.names(U0tab_1) == "NEWCASTLE"] = "NEWC"
row.names(U0tab_1)
U0tab_11_ind <- G.photo$U0tab_1
U0tab_11_ind
Hubs = c("Liverpool" = "LIV")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
Hubs = c("Manchester" = "MAN", "Newcastle" = "NEWC")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = FALSE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
source("R/Rfuns.R")
Hubs = c("Cleft Net East" = "CAM", "Leeds" = "LEEDS", "Liverpool" = "LIV", "Manchester" = "MAN", "Midlands" = "MIDS",
"Northern Ireland" = "N.IRE", "North Thames" = "N.THAMES", "Newcastle" = "NEWC", "South Thames" = "S.THAMES",
"Scotland" = "SCOT",  "Spires" = "SPIRES", "South West" = "SWSW", "Trent" = "TRENT")
for (i in 1:length(Hubs)){
tryCatch({
genReport(Hub = names(Hubs[i]), code.hub = Hubs[i], Overwrite = TRUE)
}, error = function(e) {cat("ERROR :", conditionMessage(e), "\n")})
}
